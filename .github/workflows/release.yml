name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: KVM Manager ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## ðŸš€ KVM Manager ${{ steps.get_version.outputs.version }}
            
            ### ðŸ“¦ Downloads
            - **Linux (x64)**: Download the `.AppImage` or `.deb` file
            - **Windows (x64)**: Download the `.msi` installer
            - **macOS (Intel/Apple Silicon)**: Download the `.dmg` file
            
            ### ðŸ”§ Installation
            - **Linux**: Make the AppImage executable or install the .deb package
            - **Windows**: Run the .msi installer
            - **macOS**: Open the .dmg and drag to Applications
            
            ### ðŸ†• What's New
            - Bug fixes and performance improvements
            - Enhanced VM management features
            - Updated dependencies
            
            ---
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/previous-version...${{ steps.get_version.outputs.version }}

  build-tauri:
    name: Build Tauri App
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
            os: 'darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
            os: 'darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
            os: 'linux'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
            os: 'windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libvirt-dev

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  build-universal-macos:
    name: Build Universal macOS App
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build universal macOS app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: '--target universal-apple-darwin'

  publish-to-winget:
    name: Publish to Winget
    needs: [create-release, build-tauri]
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Publish to Winget
        uses: vedantmgoyal2009/winget-releaser@v2
        with:
          identifier: KVMManager.KVMManager
          installers-regex: '\.msi$'
          token: ${{ secrets.WINGET_TOKEN }}

  publish-to-homebrew:
    name: Publish to Homebrew
    needs: [create-release, build-tauri]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Extract release info
        id: release_info
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update Homebrew Formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: kvm-manager
          formula-path: Formula/kvm-manager.rb
          homebrew-tap: your-username/homebrew-kvm-manager
          download-url: https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/kvm-manager_${{ steps.release_info.outputs.version }}_x64.dmg
          commit-message: |
            kvm-manager ${{ steps.release_info.outputs.version }}
            
            Created by https://github.com/mislav/bump-homebrew-formula-action
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}

  notify-success:
    name: Notify Success
    needs: [create-release, build-tauri]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Notify success
        run: |
          echo "âœ… Release ${{ needs.create-release.outputs.version }} completed successfully!"
          echo "ðŸ”— Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"
