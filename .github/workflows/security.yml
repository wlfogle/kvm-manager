name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  frontend-security:
    name: Frontend Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Run npm audit fix
      run: npm audit fix --dry-run
      continue-on-error: true

    - name: Check for known vulnerabilities with Snyk
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
      continue-on-error: true

  backend-security:
    name: Backend Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo audit
      run: cargo audit --deny warnings
      working-directory: src-tauri
      continue-on-error: true

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Run cargo deny
      run: cargo deny check
      working-directory: src-tauri
      continue-on-error: true

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-ghsas: GHSA-xxxx-xxxx-xxxx
        comment-summary-in-pr: always

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      matrix:
        language: [ 'javascript', 'rust' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality

    - name: Setup Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies (for JavaScript analysis)
      if: matrix.language == 'javascript'
      run: npm ci

    - name: Build frontend (for JavaScript analysis)
      if: matrix.language == 'javascript'
      run: npm run build

    - name: Setup Rust (for Rust analysis)
      if: matrix.language == 'rust'
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies (for Rust analysis)
      if: matrix.language == 'rust'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libvirt-dev

    - name: Build backend (for Rust analysis)
      if: matrix.language == 'rust'
      run: cargo build --release
      working-directory: src-tauri

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        config-path: .gitleaks.toml

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  security-summary:
    name: Security Summary
    needs: [frontend-security, backend-security, codeql-analysis, secrets-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Security check summary
      run: |
        echo "## 🛡️ Security Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Security | ${{ needs.frontend-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Security | ${{ needs.backend-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.frontend-security.result }}" == "failure" || 
              "${{ needs.backend-security.result }}" == "failure" || 
              "${{ needs.codeql-analysis.result }}" == "failure" || 
              "${{ needs.secrets-scan.result }}" == "failure" ]]; then
          echo "⚠️ **Security issues detected!** Please review the failed checks above." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
        fi
